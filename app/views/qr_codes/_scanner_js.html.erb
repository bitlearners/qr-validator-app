
<script type="text/javascript" >
//document.getElementById('qr_vid_el').addEventListener('unload', reset_qr_feed );

function decodeOnce(codeReader, selectedDeviceId=undefined) {
  codeReader.decodeFromInputVideoDevice(selectedDeviceId, 'qr_vid_el').then((result) => {
    console.log(result)
    console.log('<%= @valid_status %>')
    reset_qr_feed(codeReader)
    document.getElementById('result').textContent = result.text
    payload = {"qr_key": result.text}
    localStorage.setItem("qr_key", result.text)
    console.log(localStorage.getItem("qr_key"));
    $.ajax({
      type: "GET",
      url: '/qr_validate',
      data: payload,
      success: function(repsonse){ 
          console.log("POST data to ruby Success") 
          //console.log(repsonse.data)
          if (repsonse.data.valid_status==true){ show_permit_buttons() }else{
          	document.getElementById('qr_container').style.borderColor = "red";
          }
          update_status(repsonse.data.valid_status, repsonse.data.invalid_qr_flag) 

      },
      error: function(repsonse){ 
      	console.log("POST data to ruby fail") 
      console.log(repsonse) }
    })

  }).catch((err) => {
    if (err.toString().startsWith("R:") ){
      //document.getElementById('result').textContent = "Please wait ..." ;
      console.log("If camera doesn't start. retry");
    }
    else if (err.toString().includes("Failed to execute 'getImageData'") ){
      document.getElementById('result').textContent = "Please wait ..." ;
      process();
    }else{
    console.error(err)
    document.getElementById('result').textContent = err
    }
  })
  
}

function show_permit_buttons() {
	document.getElementById('qr_container').style.borderColor = "green";

	document.getElementById('scan-cancel-btn').style.display = "block";
	document.getElementById('scan-approve-btn').style.display = "block";
	
}

function hide_permit_buttons() {
	document.getElementById('qr_container').style.borderColor = "gray";

	document.getElementById('scan-cancel-btn').style.display = "none";
	document.getElementById('scan-approve-btn').style.display = "none";
}


function update_status(valid_status, invalid_qr_flag) {
	//console.log(valid_status, invalid_qr_flag) ;
	const scan_status_el = document.getElementById("scan_status");
	if(!invalid_qr_flag){
	  if (valid_status==true){
	      msg = "Success - Ticket Found" ;
	 			scan_status_el.style = "color: green;" ;
	  }else{
	      msg = "Failed - Ticket Already Scaned" ;
	 			scan_status_el.style = "color: red;" ;
	  }
	}else{
		msg = "Failed - No such Ticket";
		scan_status_el.style = "color: red;" ;

		Swal.fire({
		  icon: 'error',
		  title: 'Error',
		  text: 'No such Ticket in record !'
		})

	}
  scan_status_el.textContent = msg ;
}	


function approve_ticket(){
	// ajax call ruby action to approve ticket
	params = {"qr_key": localStorage.getItem("qr_key")}
	$.ajax({
      type: "GET",
      url: "/qr_approve_ticket",
      data: params,
      success: function(repsonse){ 
          console.log("approve request Success") 
          console.log(repsonse) 
          if(repsonse.status){ 
          	//alert("Ticket has been approved") 

				     Swal.fire(
							  'Success!',
							  'Ticket has been approved!',
							  'success'
							)
          	scan_new_qr()
          }else{
          		console.log(repsonse)
          	}
      },
      error: function(repsonse){ console.log("approve request fail") }
    })
}


function reject_ticket(){
	// ajax call ruby action to reject ticket
	params = {"qr_key": localStorage.getItem("qr_key")}
	$.ajax({
      type: "GET",
      url: "/qr_reject_ticket",
      data: params,
      success: function(repsonse){ 
          console.log("reject request Success") 
          console.log(repsonse) 
          if(repsonse.status){ 

						Swal.fire({
						  icon: 'error',
						  title: 'Alert',
						  text: 'Ticket has been Rejected!'
						})

          	scan_new_qr()
          }else{
          		console.log(repsonse)
          	}
      },
      error: function(repsonse){ console.log("reject request fail") }
    })
}



function scan_new_qr(){

	//document.getElementById('resetButton').click()
	document.getElementById('startButton').click()
}


function reset_qr_feed(codeReader) {
  try{
    codeReader.reset()
  }catch(err){
    console.log(err);
  }

	document.getElementById('qr_container').style.borderColor = "gray";
  document.getElementById('result').textContent = '';
  //document.getElementById('scan_status').textContent = '';
  console.log('Reset.');
}

function start_qr_feed(selectedDeviceId, codeReader) {
  const decodingStyle = document.getElementById('decoding-style').value;
  document.getElementById('result').textContent = '';
  document.getElementById('scan_status').textContent = '';
  hide_permit_buttons()

  decodeOnce(codeReader, selectedDeviceId);
  

  //console.log(`Started decode from camera with id ${selectedDeviceId}`);
  console.log('Started decode from camera');
}






window.addEventListener('load', process );
window.addEventListener('unload', function (){ console.log("page left") ; } );

  // main function
function process(){
	//const codeReader = new ZXing.BrowserQRCodeReader();
	//location.reload();
	let selectedDeviceId;
	let codeReader;
	console.log('code reader initialized');
	codeReader = new ZXing.BrowserQRCodeReader();
	console.log('code reader initialized');
	document.getElementById('result').textContent = '';
	decodeOnce(codeReader, selectedDeviceId);

	hide_permit_buttons()

	//console.log(`Started decode from camera with id ${selectedDeviceId}`);
	console.log('Started decode from camera');

	codeReader.getVideoInputDevices()
	  .then((videoInputDevices) => {
	    const sourceSelect = document.getElementById('sourceSelect')
	    selectedDeviceId = undefined  ; //videoInputDevices[0].deviceId
	    if (videoInputDevices.length >= 1) {
	      videoInputDevices.forEach((element) => {
	        const sourceOption = document.createElement('option')
	        sourceOption.text = element.label
	        sourceOption.value = element.deviceId
	        sourceSelect.appendChild(sourceOption)
	      })

	      sourceSelect.onchange = () => {
	        selectedDeviceId = undefined; //sourceSelect.value;
	      };

	      const sourceSelectPanel = document.getElementById('sourceSelectPanel')
	      sourceSelectPanel.style.display = 'none'
	    }

	    document.getElementById('startButton').addEventListener('click', () => {
	      start_qr_feed(selectedDeviceId, codeReader);
	    })	// scan button

	    // document.getElementById('resetButton').addEventListener('click', () => {
	    //  reset_qr_feed(codeReader) ;
	    // })
	    document.getElementById('approveButton').addEventListener('click', () => {
	     approve_ticket() ;
	    })

	    document.getElementById('rejectButton').addEventListener('click', () => {
	     reject_ticket() ;
	    })
	  })
	  .catch((err) => {
	    console.error(`main error \n ${err}`)
	  })

}

</script>


